//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.3.0
//     from Assets/Systems/Input_Actions_KO.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Input_Actions_KO : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Input_Actions_KO()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Input_Actions_KO"",
    ""maps"": [
        {
            ""name"": ""Gameplay_Map"",
            ""id"": ""2d0a3ec8-ceee-45b8-a984-ea124f9bfd3c"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""Value"",
                    ""id"": ""b024c8fb-8cd0-483a-98ca-b6a2484d8bb8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""WASD"",
                    ""id"": ""7dc9e013-1b33-471f-a5ff-c7f3e5517f96"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""57f9e0c1-1f8f-4a75-9858-b575fed9479c"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keeb or Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""8c39b32f-1a03-4a23-8b00-c204b6f696fa"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keeb or Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""9d3f0064-38c6-41b0-9cbf-a6ed860cafdc"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keeb or Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""cb5e760d-1900-4750-951c-bee96ad26380"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keeb or Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""01d9cd38-ab01-4766-9878-21ed9673680b"",
                    ""path"": ""<Gamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keeb or Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9cdf4959-69d4-4b6d-adbb-b32918be1e6b"",
                    ""path"": ""<Gamepad>/dpad"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keeb or Pad"",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Menus_Map"",
            ""id"": ""5c6de5a6-3f0d-4663-988d-1ea791d9eb41"",
            ""actions"": [
                {
                    ""name"": ""Confirm"",
                    ""type"": ""Button"",
                    ""id"": ""82b6e42a-5081-4cc9-9f72-7f9ec4c97b32"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""0a0a8f99-0a9a-420d-84fa-f86e6058e095"",
                    ""path"": """",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""Keeb or Pad"",
                    ""action"": ""Confirm"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keeb or Pad"",
            ""bindingGroup"": ""Keeb or Pad"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": true,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Gamepad>"",
                    ""isOptional"": true,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Gameplay_Map
        m_Gameplay_Map = asset.FindActionMap("Gameplay_Map", throwIfNotFound: true);
        m_Gameplay_Map_Move = m_Gameplay_Map.FindAction("Move", throwIfNotFound: true);
        // Menus_Map
        m_Menus_Map = asset.FindActionMap("Menus_Map", throwIfNotFound: true);
        m_Menus_Map_Confirm = m_Menus_Map.FindAction("Confirm", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Gameplay_Map
    private readonly InputActionMap m_Gameplay_Map;
    private IGameplay_MapActions m_Gameplay_MapActionsCallbackInterface;
    private readonly InputAction m_Gameplay_Map_Move;
    public struct Gameplay_MapActions
    {
        private @Input_Actions_KO m_Wrapper;
        public Gameplay_MapActions(@Input_Actions_KO wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_Gameplay_Map_Move;
        public InputActionMap Get() { return m_Wrapper.m_Gameplay_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Gameplay_MapActions set) { return set.Get(); }
        public void SetCallbacks(IGameplay_MapActions instance)
        {
            if (m_Wrapper.m_Gameplay_MapActionsCallbackInterface != null)
            {
                @Move.started -= m_Wrapper.m_Gameplay_MapActionsCallbackInterface.OnMove;
                @Move.performed -= m_Wrapper.m_Gameplay_MapActionsCallbackInterface.OnMove;
                @Move.canceled -= m_Wrapper.m_Gameplay_MapActionsCallbackInterface.OnMove;
            }
            m_Wrapper.m_Gameplay_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Move.started += instance.OnMove;
                @Move.performed += instance.OnMove;
                @Move.canceled += instance.OnMove;
            }
        }
    }
    public Gameplay_MapActions @Gameplay_Map => new Gameplay_MapActions(this);

    // Menus_Map
    private readonly InputActionMap m_Menus_Map;
    private IMenus_MapActions m_Menus_MapActionsCallbackInterface;
    private readonly InputAction m_Menus_Map_Confirm;
    public struct Menus_MapActions
    {
        private @Input_Actions_KO m_Wrapper;
        public Menus_MapActions(@Input_Actions_KO wrapper) { m_Wrapper = wrapper; }
        public InputAction @Confirm => m_Wrapper.m_Menus_Map_Confirm;
        public InputActionMap Get() { return m_Wrapper.m_Menus_Map; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(Menus_MapActions set) { return set.Get(); }
        public void SetCallbacks(IMenus_MapActions instance)
        {
            if (m_Wrapper.m_Menus_MapActionsCallbackInterface != null)
            {
                @Confirm.started -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnConfirm;
                @Confirm.performed -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnConfirm;
                @Confirm.canceled -= m_Wrapper.m_Menus_MapActionsCallbackInterface.OnConfirm;
            }
            m_Wrapper.m_Menus_MapActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Confirm.started += instance.OnConfirm;
                @Confirm.performed += instance.OnConfirm;
                @Confirm.canceled += instance.OnConfirm;
            }
        }
    }
    public Menus_MapActions @Menus_Map => new Menus_MapActions(this);
    private int m_KeeborPadSchemeIndex = -1;
    public InputControlScheme KeeborPadScheme
    {
        get
        {
            if (m_KeeborPadSchemeIndex == -1) m_KeeborPadSchemeIndex = asset.FindControlSchemeIndex("Keeb or Pad");
            return asset.controlSchemes[m_KeeborPadSchemeIndex];
        }
    }
    public interface IGameplay_MapActions
    {
        void OnMove(InputAction.CallbackContext context);
    }
    public interface IMenus_MapActions
    {
        void OnConfirm(InputAction.CallbackContext context);
    }
}
